#include "statehandler.h"

#include <iostream>

/*****************************************************************************************************************************************************************
*   pushState() adds a state to the end of the state stack
*   param1  :   a state to push to the end of the state stack
***************************************************************************************************************************************************************/
void StateHandler::pushState (const statePtr& state)
{
    mStates.emplace( state );
}

/*****************************************************************************************************************************************************************
*   changeState() removes the top state, and completely replaces it
*   param1  :   a state to push to the end of the state stack
**************************************************************************************************************************************************************/
void StateHandler::changeState(const statePtr& state)
{
    while( !mStates.empty( ) ) {
        popState();
    }

    mStates.emplace( state );
}

/*****************************************************************************************************************************************************************
*   popState()  removes the top state
***************************************************************************************************************************************************************/
void StateHandler::popState ()
{
    mStates.pop();
}

/*****************************************************************************************************************************************************************
*   getState()  returns the state that is on top
***************************************************************************************************************************************************************/
statePtr StateHandler::getState ()
{
    if( mStates.empty() )
    {
        std::cerr << "State stack is empty! Unable to peek state. \n";
        return nullptr;
    }
    return mStates.top();
}


